purpose of C++ programming was to add object orientation to the C programming language

There are a few principle concepts that form the foundation of object-oriented programming −

Object
This is the basic unit of object oriented programming. That is both data and function that operate on data are bundled as a unit called as object.

Class
When you define a class, you define a blueprint for an object. This doesn't actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object.

Abstraction
Data abstraction refers to, providing only essential information to the outside world and hiding their background details, i.e., to represent the needed information in program without presenting the details.

Encapsulation
Encapsulation is placing the data and the functions that work on that data in the same place. While working with procedural languages, it is not always clear which functions work on which variables but object-oriented programming provides you framework to place the data and the relevant functions together in the same object.

Inheritance
One of the most useful aspects of object-oriented programming is code reusability. As the name suggests Inheritance is the process of forming a new class from an existing class that is from the existing class called as base class, new class is formed called as derived class.

This is a very important concept of object-oriented programming since this feature helps to reduce the code size.

Polymorphism
The ability to use an operator or function in different ways in other words giving different meaning or functions to the operators or functions is called polymorphism. Poly refers to many. That is a single function or an operator functioning in many ways different upon the usage is called polymorphism.

Overloading
The concept of overloading is also a branch of polymorphism. When the exiting operator or function is made to operate on new data type, it is said to be overloaded.


A  class is used to specify the form of an object and it combines data representation and methods for manipulating that data into one neat package. The data and functions within a class are called members of the class.




C++ Class Definitions:

A class definition starts with the keyword class followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example, we defined the Box data type using the keyword class as follows −

class Box {
   public:
      double length;   // Length of a box
      double breadth;  // Breadth of a box
      double height;   // Height of a box
};

The keyword public determines the access attributes of the members of the class that follows it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as private or protected which we will discuss in a sub-section.

class ClassName {
     access_specifier:
     // Body of the class
};


Define C++ Objects:
A class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box −

Box Box1;          // Declare Box1 of type Box
Box Box2;          // Declare Box2 of type Box


Accessing the Data Members:

The public data members of objects of a class can be accessed using the direct member access operator (.). Let us try the following example to make the things clear −

#include <iostream>

using namespace std;

class Box {
   public:
      double length;   // Length of a box
      double breadth;  // Breadth of a box
      double height;   // Height of a box
};

int main() {
   Box Box1;        // Declare Box1 of type Box
   Box Box2;        // Declare Box2 of type Box
   double volume = 0.0;     // Store the volume of a box here
 
   // box 1 specification
   Box1.height = 5.0; 
   Box1.length = 6.0; 
   Box1.breadth = 7.0;

   // box 2 specification
   Box2.height = 10.0;
   Box2.length = 12.0;
   Box2.breadth = 13.0;
   
   // volume of box 1
   volume = Box1.height * Box1.length * Box1.breadth;
   cout << "Volume of Box1 : " << volume <<endl;

   // volume of box 2
   volume = Box2.height * Box2.length * Box2.breadth;
   cout << "Volume of Box2 : " << volume <<endl;
   return 0;
}

When the above code is compiled and executed, it produces the following result −

Volume of Box1 : 210
Volume of Box2 : 1560


I have added how to find area?


#include <iostream>

using namespace std;

class Box {
   public:
      double length;   // Length of a box
      double breadth;  // Breadth of a box
      double height;   // Height of a box
};

int main() {
   Box Box1;        // Declare Box1 of type Box
   Box Box2;        // Declare Box2 of type Box
   double volume = 0.0;     // Store the volume of a box here
   double area = 0.0;
 
   // box 1 specification
   Box1.height = 5.0; 
   Box1.length = 6.0; 
   Box1.breadth = 7.0;

   // box 2 specification
   Box2.height = 10.0;
   Box2.length = 12.0;
   Box2.breadth = 13.0;
   
   // volume of box 1
   volume = Box1.height * Box1.length * Box1.breadth;
   cout << "Volume of Box1 : " << volume <<endl;
   
   // Area of box 1
   area = Box1.length * Box1.breadth;
   cout << "Area of Box1 : " << area <<endl;

   // Area of box 2
   volume = Box2.height * Box2.length * Box2.breadth;
   cout << "Volume of Box2 : " << volume <<endl;
   
   // Area of box 2
   area = Box2.length * Box2.breadth;
   cout << "Area of Box2 : " << area <<endl;
   return 0;
}
---------------------------------------

Why it is important to write “using namespace std” in C++ program?

As the same name can’t be given to multiple variables, functions, classes, etc. in the same scope. So, to overcome this situation, namespace is introduced.

---------------------------------------


********It is important to note that private and protected members can not be accessed directly using direct member access operator (.). We will learn how private and protected members can be accessed.





#######################################
	Class Member Functions
A member function of a class is a function that has its definition or its prototype within the class definition like any other variable.

2	Class Access Modifiers
A class member can be defined as public, private or protected. By default members would be assumed as private.

3	Constructor & Destructor
A class constructor is a special function in a class that is called when a new object of the class is created. A destructor is also a special function which is called when created object is deleted.

4	Copy Constructor
The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously.

5	Friend Functions
A friend function is permitted full access to private and protected members of a class.

6	Inline Functions
With an inline function, the compiler tries to expand the code in the body of the function in place of a call to the function.

7	this Pointer
Every object has a special pointer this which points to the object itself.

8	Pointer to C++ Classes
A pointer to a class is done exactly the same way a pointer to a structure is. In fact a class is really just a structure with functions in it.

9	Static Members of a Class
Both data members and function members of a class can be declared as static.
#########################################################


In C++, there are 3 access specifiers that are as follows:

Public: Members declared as public can be accessed from outside the class.
Private: Members declared as private can only be accessed within the class itself.
Protected: Members declared as protected can be accessed within the class and by derived classes.
If we do not specify the access specifier, the private specifier is applied to every member by default.

------------------------------------

// C++ program to illustrate how create a simple class and
// object
#include <iostream>
#include <string>

using namespace std;

// Define a class named 'Person'
class BankAccount {
public:
    // Data members
    string name;
    int ac_num;
    double balance;

    // Member function to Display the account details
    void details()
    {
        cout << "Name: " << name << "\nAccount number: "
             << ac_num << " \nBalance: " << balance << endl;
    }
};

int main()
{
    // Create an object of the Person class
    BankAccount BankAccount1;

    // accessing data members
    BankAccount1.name = "Aswin";
    BankAccount1.ac_num = 123123123;
    BankAccount1.balance = 100000;

    // Call the introduce member method
    BankAccount1.details();

    return 0;
}

-------------------------------------------

Following is the code for adding and printing user details using access specifiers


// C++ program to demonstrate accessing of data members
#include <bits/stdc++.h> //defintion of outside class
using namespace std;
class Geeks {
private:
    string geekname;
    int geeknum;
    double geekbalance;
    // Access specifier
public:
    // Member Functions()
    void setdetails(string name,int num, double balance) { geekname = name; geeknum = num; geekbalance = balance; }

    void printdetails() { cout << "Geekname is:" << geekname << "\nGeeknum is:" << geeknum << "\nGeekbalance is:" << geekbalance;}
};
int main()
{
    // Declare an object of class geeks
    Geeks obj1;
    // accessing data member
    // cannot do it like: obj1.geekname = "Abhi";
    obj1.setdetails("Aswin", 123123123, 100000);
    // accessing member function
    obj1.printdetails();
    return 0;
}


In the above example, we cannot access the data member geekname outside the class. If we try to access it in the main function using dot operator, obj1.geekname, then program will throw an error.
------------------------------------------------------------------
Member Function in C++ Classes
There are 2 ways to define a member function:

Inside class definition
Outside class definition
Till now, we have defined the member function inside the class, but we can also define the member function outside the class. To define a member function outside the class definition,

We have to first declare the function prototype in the class definition.
Then we have to use the scope resolution:: operator along with the class name and function name.

Example:

// C++ program to demonstrate member function
// definition outside class
#include <bits/stdc++.h>
using namespace std;
class Geeks {
public:
    string geekname;
    int id;

    // printname is not defined inside class definition
    void printname();

    // printid is defined inside class definition
    void printid() { cout << "Geek id is: " << id; }
};

// Definition of printname using scope resolution operator
// ::
void Geeks::printname()
{
    cout << "Geekname is: " << geekname;
}
int main()
{

    Geeks obj1;
    obj1.geekname = "xyz";
    obj1.id = 15;

    // call printname()
    obj1.printname();
    cout << endl;

    // call printid()
    obj1.printid();
    return 0;
}



--------------------------------------------
Constructors
Constructors are special class members which are called by the compiler every time an object of that class is instantiated. Constructors have the same name as the class and may be defined inside or outside the class definition.

There are 4 types of constructors in C++ classes:

Default Constructors: The constructor that takes no argument is called default constructor.
Parameterized Constructors: This type of constructor takes the arguments to initialize the data members.
Copy Constructors: Copy constructor creates the object from an already existing object by copying it.
Move Constructor: The move constructor also creates the object from an already existing object but by moving it.





